{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.lake",
	"fileTypes": [
	  "lake"
	],
	"name": "Lake",
	"patterns": [
	  {
		"include": "#comments"
	  },
	  {
		"include": "#keywords"
	  },
	  {
		"include": "#types"
	  },
	  {
		"include": "#literals"
	  },
	  {
		"include": "#identifiers"
	  },
	  {
		"include": "#constants"
	  },
	  {
		"include": "#operators"
	  }
	],
	"repository": {
	  "comments": {
		"patterns": [
		  {
			"name": "comment.line.double-slash.lake",
			"match": "//.*$"
		  },
		  {
			"name": "comment.block.lake",
			"begin": "/\\*",
			"end": "\\*/",
			"captures": {
			  "0": {
				"name": "punctuation.definition.comment.lake"
			  }
			}
		  },
		  {
			"name": "comment.line.documentation.lake",
			"match": "///.*$"
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.control.import.lake",
			"match": "\\bimport\\b"
		  },
		  {
			"name": "keyword.control.namespace.lake",
			"match": "\\bnamespace\\b"
		  },
		  {
			"name": "keyword.control.const.lake",
			"match": "\\bconst\\b"
		  },
		  {
			"name": "keyword.control.typedef.lake",
			"match": "\\btypedef\\b"
		  },
		  {
			"name": "keyword.control.enum.lake",
			"match": "\\benum\\b"
		  },
		  {
			"name": "keyword.control.struct.lake",
			"match": "\\bstruct\\b"
		  },
		  {
			"name": "keyword.control.exception.lake",
			"match": "\\bexception\\b"
		  },
		  {
			"name": "keyword.control.service.lake",
			"match": "\\bservice\\b"
		  },
		  {
			"name": "keyword.control.extends.lake",
			"match": "\\bextends\\b"
		  },
		  {
			"name": "keyword.other.required.lake",
			"match": "\\brequired\\b"
		  },
		  {
			"name": "keyword.other.optional.lake",
			"match": "\\boptional\\b"
		  },
		  {
			"name": "keyword.control.throws.lake",
			"match": "\\bthrows\\b"
		  },
		  {
			"name": "keyword.other.void.lake",
			"match": "\\bvoid\\b"
		  }
		]
	  },
	  "types": {
		"patterns": [
		  {
			"name": "support.type.primitive.lake",
			"match": "\\b(bool|byte|i8|i16|i32|i64|double|string|binary|uuid)\\b"
		  },
		  {
			"name": "storage.type.container.lake",
			"match": "\\b(map|set|list|stream)\\b"
		  },
		  {
			"name": "entity.name.type.user-defined.lake",
			"match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
		  }
		]
	  },
	  "literals": {
		"patterns": [
		  {
			"name": "string.quoted.double.lake",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  {
				"name": "constant.character.escape.lake",
				"match": "\\\\."
			  }
			]
		  },
		  {
			"name": "string.quoted.single.lake",
			"begin": "'",
			"end": "'",
			"patterns": [
			  {
				"name": "constant.character.escape.lake",
				"match": "\\\\."
			  }
			]
		  },
		  {
			"name": "constant.numeric.integer.lake",
			"match": "\\b[+-]?(?:0|[1-9]\\d*)\\b"
		  },
		  {
			"name": "constant.numeric.float.lake",
			"match": "\\b[+-]?(?:\\d+\\.\\d*(?:[Ee][+-]?\\d+)?|\\.\\d+(?:[Ee][+-]?\\d+)?|\\d+(?:[Ee][+-]?\\d+))\\b"
		  },
		  {
			"name": "constant.language.boolean.lake",
			"match": "\\b(true|false)\\b"
		  }
		]
	  },
	  "identifiers": {
		"patterns": [
		  {
			"name": "entity.name.function.lake",
			"match": "(?<=^|\\s)(?:\\b(?:void|bool|byte|i8|i16|i32|i64|double|string|binary|uuid|map|set|list|stream)\\b|<[A-Z][a-zA-Z0-9_]*>\\s*|[A-Z][a-zA-Z0-9_]*\\s+)\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()"
		  },
		  {
			"name": "entity.name.type.enum-member.lake",
			"match": "\\b([A-Z_][A-Z0-9_]*)(?=\\s*(?:=|\\s*,|\\s*\\}))"
		  },
		  {
			"name": "variable.other.field.lake",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(=|:|,|;))"
		  },
		  {
			"name": "variable.other.declaration.lake",
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"name": "constant.numeric.field-id.lake",
			"match": "\\b\\d+:\\b"
		  },
		  {
			"name": "constant.language.namespace-scope.lake",
			"match": "\\b(\\*|js|dart)\\b"
		  },
		  {
			"name": "variable.other.enum-constant.lake",
			"match": "\\b([A-Z][a-zA-Z0-9_]*)\\.([A-Z_][A-Z0-9_]*)\\b"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.assignment.lake",
			"match": "="
		  },
		  {
			"name": "punctuation.separator.list.lake",
			"match": "[,;]"
		  },
		  {
			"name": "punctuation.separator.key-value.lake",
			"match": ":"
		  },
		  {
			"name": "punctuation.accessor.dot.lake",
			"match": "\\."
		  },
		  {
			"name": "punctuation.bracket.angle.lake",
			"match": "[<>]"
		  },
		  {
			"name": "punctuation.bracket.curly.lake",
			"match": "[{}]"
		  },
		  {
			"name": "punctuation.bracket.square.lake",
			"match": "[\\[\\]]"
		  },
		  {
			"name": "punctuation.parenthesis.round.lake",
			"match": "[()]"
		  }
		]
	  }
	}
  }